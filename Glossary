## Perform a query to the CDS and return the data described in the request
cdstoolbox.catalogue.retrieve(*args, **kwargs)

    # Ex. 1
    data = ct.catalogue.retrieve(
        'reanalysis-era5-single-levels',
        {
            'product_type': 'reanalysis',
            'variable': '2m_temperature',
            'year': [
                '2007', '2008', '2009',
            ],
            'month': '01',
            'day': '01',
            'time': '00:00',
        }
    )

    # Ex. 2
    data = ct.catalogue.retrieve(
        'satellite-carbon-dioxide',
        {
            'processing_level':'level_2',
            'variable':'co2',
            'sensor_and_algorithm':'iasi_metop_a_nlis',
            'year':'2016',
            'month':'01',
            'day':'01',
            'version': '4.2',
        }
    )

    # Ex. 3
    data = ct.catalogue.retrieve(
        'reanalysis-era5-single-levels',
        {
            'product_type': 'reanalysis',
            'variable': [
                '2m_temperature', 'total_precipitation',
            ],
            'year': [
                '2007', '2008', '2009',
            ],
            'month': '01',
            'day': '01',
            'time': '00:00',
        }
    )

## Return a copy of data with updated attributes
cdstoolbox.cdm.update_attributes(*args, **kwargs)

    # Ex: Update name., remove units., change the attributes of a specific coordinate
    new_data = ct.cdm.update_attributes(data, attrs={'long_name': 'new_name'})
    new_data = ct.cdm.update_attributes(data, remove=['units', 'type'])
    new_data = ct.cdm.update_attributes(data, coord_attrs={'lat': {'axis': 'new_axis_name'}})

## Return a resampled data object over the selected dimension, using a specified method and frequency
cdstoolbox.cube.resample (data: data object, freq: str, dim: str = 'time', how: str = 'mean', closed: str = 'left', 
label: str = 'left', keep_attrs: bool = True, skipna: bool = True, **kwargs)

    # To obtain the monthly accumulated sum of data
    monthly_sum = ct.cube.resample(data, how='sum', freq='day')
 
 ## Return climatology mean of data, calculated between start and stop, and averaged by frequency
 cdstoolbox.climate.climatology_mean(data: data object, start: str = None, stop: str = None, frequency: str = 'month') 
 
    # Compute daily climatology mean of data, assuming it contains data between 2009 and 2019
    monthly_clim = ct.climate.climatology_mean(data, start='2009', stop='2019', frequency='dayofyear')
